#include <PubSubClient.h>


  
#include <UIPEthernet.h>
#include <utility/logging.h>

#include <SPI.h>

int pino2 = 2; //Cria uma variável para o Pino 2
bool estado_sensor; //Cria uma variável para Armazenar o estado do sensor

//Define o endereço MAC que será utilizado
byte mac[] = {0x1E, 0x97, 0xC3, 0x49, 0xD5, 0xF2};

//Variavel utilizada para enviar as mensagens utilizando
boolean mensagem;

//Inicia o cliente Ethernet
EthernetClient client;

PubSubClient mqttClient(client);


void setup() { 

    pinMode(pino2,INPUT_PULLUP); //Coloca o Pino 2 como Entrada
    //Inicia o controlador Ethernet e solicita um IP para o servidor de DHCP
    Ethernet.begin(mac);

    //Inicia o monitor Serial
    Serial.begin(9600);

    mqttClient.setServer("54.144.190.205",1883);

    //Exibe no Monitor Serial as informações sobre o IP do Arduino
    Serial.print("O IP do Arduino e: ");
    Serial.println(Ethernet.localIP());

    //Exibe no Monitor Serial as informações sobre a Máscara de Rede do Arduino
    Serial.print("A Mascara de Rede do Arduino e: ");
    Serial.println(Ethernet.subnetMask());

    //Exibe no Monitor Serial as informações sobre o Gateway do Arduino
    Serial.print("O Gateway do Arduino e: ");
    Serial.println(Ethernet.gatewayIP());

    //Exibe uma linha em branco
    Serial.println("");

}

void loop() {

mqttClient.connect("christian");


estado_sensor = digitalRead(pino2); //Efetua a leitura do Pino 2 e armazena o valor obtido na variável

if (estado_sensor ==0 ){

Serial.print("O RACK ESTA FECHADO");
mensagem = mqttClient.publish("christian-S","FECHADO");
Serial.println(pino2);
mqttClient.loop();

  
}
else
{

Serial.print("O RACK ESTA ABERTO");
mensagem = mqttClient.publish("christian-S","ABERTO");
Serial.println(pino2);
mqttClient.loop();


}
}

  



